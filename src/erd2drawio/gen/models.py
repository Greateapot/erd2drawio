# generated by datamodel-codegen:
#   filename:  erd_editor_schema.json
#   timestamp: 2024-03-24T07:50:55+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, confloat
from typing_extensions import Literal


class CanvasType(Enum):
    ERD = 'ERD'
    field_dineug_erd_editor_builtin_visualization = (
        '@dineug/erd-editor/builtin-visualization'
    )
    field_dineug_erd_editor_builtin_schema_sql = '@dineug/erd-editor/builtin-schema-sql'
    field_dineug_erd_editor_builtin_generator_code = (
        '@dineug/erd-editor/builtin-generator-code'
    )
    settings = 'settings'


class Settings(BaseModel):
    width: confloat(ge=2000.0, le=20000.0) # type: ignore
    height: confloat(ge=2000.0, le=20000.0) # type: ignore
    scrollTop: float
    scrollLeft: float
    zoomLevel: confloat(ge=0.1, le=1.0) # type: ignore
    show: int = Field(
        ...,
        description='bit value (tableComment: 1) | (columnComment: 2) | (columnDataType: 4) | (columnDefault: 8) | (columnAutoIncrement: 16) | (columnPrimaryKey: 32) | (columnUnique: 64) | (columnNotNull: 128) | (relationship: 256)',
    )
    database: Optional[int] = Field(
        None,
        description='bit value (MariaDB: 1) | (MSSQL: 2) | (MySQL: 4) | (Oracle: 8) | (PostgreSQL: 16) | (SQLite: 32)',
    )
    databaseName: Optional[str] = None
    canvasType: CanvasType
    language: int = Field(
        ...,
        description='bit value (GraphQL: 1) | (csharp: 2) | (Java: 4) | (Kotlin: 8) | (TypeScript: 16) | (JPA: 32) | (Scala: 64)',
    )
    tableNameCase: int = Field(
        ...,
        description='bit value (none: 1) | (camelCase: 2) | (pascalCase: 4) | (snakeCase: 8)',
    )
    columnNameCase: int = Field(
        ...,
        description='bit value (none: 1) | (camelCase: 2) | (pascalCase: 4) | (snakeCase: 8)',
    )
    bracketType: int = Field(
        ...,
        description='bit value (none: 1) | (doubleQuote: 2) | (singleQuote: 4) | (backtick: 8)',
    )
    relationshipDataTypeSync: bool
    relationshipOptimization: bool
    columnOrder: List = Field(
        ...,
        description='bit value (columnName: 1) | (columnDataType: 2) | (columnNotNull: 4) | (columnUnique: 8) | (columnAutoIncrement: 16) | (columnDefault: 32) | (columnComment: 64)',
        max_length=7,
        min_length=7,
    )
    maxWidthComment: int


class Doc(BaseModel):
    tableIds: Optional[List[str]] = None
    relationshipIds: Optional[List[str]] = None
    indexIds: Optional[List[str]] = None
    memoIds: Optional[List[str]] = None


class Lww(RootModel[Optional[Dict[str, List]]]):
    root: Optional[Dict[str, List]] = None


class Ui(BaseModel):
    x: float
    y: float
    zIndex: float
    widthName: float
    widthComment: float
    color: str


class Ui1(BaseModel):
    keys: int = Field(..., description='bit value (primaryKey: 1) | (foreignKey: 2)')
    widthName: float
    widthComment: float
    widthDataType: float
    widthDefault: float


class Ui2(BaseModel):
    x: float
    y: float
    zIndex: float
    width: float
    height: float
    color: str


class EntityMeta(BaseModel):
    updateAt: int
    createAt: int


class RelationshipPoint(BaseModel):
    tableId: str
    columnIds: List[str]
    x: float
    y: float
    direction: int = Field(
        ..., description='bit value (left: 1) | (right: 2) | (top: 4) | (bottom: 8)'
    )


class TableEntities1(BaseModel):
    id: str
    name: str
    comment: str
    columnIds: List[str]
    seqColumnIds: List[str]
    ui: Ui
    meta: EntityMeta


class TableEntities(RootModel[Optional[Dict[str, TableEntities1]]]):
    root: Optional[Dict[str, TableEntities1]] = None


class TableColumnEntities1(BaseModel):
    id: str
    tableId: str
    name: str
    comment: str
    dataType: str
    default: str
    options: int = Field(
        ...,
        description='bit value (autoIncrement: 1) | (primaryKey: 2) | (unique: 4) | (notNull: 8)',
    )
    ui: Ui1
    meta: EntityMeta


class TableColumnEntities(RootModel[Optional[Dict[str, TableColumnEntities1]]]):
    root: Optional[Dict[str, TableColumnEntities1]] = None


class RelationshipEntities1(BaseModel):
    id: str
    identification: bool
    relationshipType: int = Field(
        ...,
        description='bit value (ZeroOne: 2) | (ZeroN: 4) | (OneOnly: 8) | (OneN: 16)',
    )
    startRelationshipType: int = Field(
        ..., description='bit value (ring: 1) | (dash: 2)'
    )
    start: RelationshipPoint
    end: RelationshipPoint
    meta: EntityMeta


class RelationshipEntities(RootModel[Optional[Dict[str, RelationshipEntities1]]]):
    root: Optional[Dict[str, RelationshipEntities1]] = None


class IndexEntities1(BaseModel):
    id: str
    name: str
    tableId: str
    indexColumnIds: List[str]
    seqIndexColumnIds: List[str]
    unique: bool
    meta: EntityMeta


class IndexEntities(RootModel[Optional[Dict[str, IndexEntities1]]]):
    root: Optional[Dict[str, IndexEntities1]] = None


class IndexColumnEntities1(BaseModel):
    id: str
    indexId: str
    columnId: str
    orderType: int = Field(..., description='bit value (ASC: 1) | (DESC: 2)')
    meta: EntityMeta


class IndexColumnEntities(RootModel[Optional[Dict[str, IndexColumnEntities1]]]):
    root: Optional[Dict[str, IndexColumnEntities1]] = None


class MemoEntities1(BaseModel):
    id: str
    value: str
    ui: Ui2
    meta: EntityMeta


class MemoEntities(RootModel[Optional[Dict[str, MemoEntities1]]]):
    root: Optional[Dict[str, MemoEntities1]] = None


class Collections(BaseModel):
    tableEntities: TableEntities
    tableColumnEntities: TableColumnEntities
    relationshipEntities: RelationshipEntities
    indexEntities: IndexEntities
    indexColumnEntities: IndexColumnEntities
    memoEntities: MemoEntities


class ErdEditorSchema(BaseModel):
    field_schema: Optional[str] = Field(None, alias='$schema')
    version: Literal['3.0.0'] = Field(..., description='Version of the schema')
    settings: Settings
    doc: Doc
    lww: Lww
    collections: Collections
